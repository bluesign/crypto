// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dapperlabs/flow-go/crypto (interfaces: PublicKey)

// Package mocks is a generated GoMock package.
package mocks

import (
	crypto "github.com/dapperlabs/flow-go/crypto"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPublicKey is a mock of PublicKey interface
type MockPublicKey struct {
	ctrl     *gomock.Controller
	recorder *MockPublicKeyMockRecorder
}

// MockPublicKeyMockRecorder is the mock recorder for MockPublicKey
type MockPublicKeyMockRecorder struct {
	mock *MockPublicKey
}

// NewMockPublicKey creates a new mock instance
func NewMockPublicKey(ctrl *gomock.Controller) *MockPublicKey {
	mock := &MockPublicKey{ctrl: ctrl}
	mock.recorder = &MockPublicKeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPublicKey) EXPECT() *MockPublicKeyMockRecorder {
	return m.recorder
}

// Algorithm mocks base method
func (m *MockPublicKey) Algorithm() crypto.SigningAlgorithm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Algorithm")
	ret0, _ := ret[0].(crypto.SigningAlgorithm)
	return ret0
}

// Algorithm indicates an expected call of Algorithm
func (mr *MockPublicKeyMockRecorder) Algorithm() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Algorithm", reflect.TypeOf((*MockPublicKey)(nil).Algorithm))
}

// Encode mocks base method
func (m *MockPublicKey) Encode() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encode indicates an expected call of Encode
func (mr *MockPublicKeyMockRecorder) Encode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockPublicKey)(nil).Encode))
}

// KeySize mocks base method
func (m *MockPublicKey) KeySize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeySize")
	ret0, _ := ret[0].(int)
	return ret0
}

// KeySize indicates an expected call of KeySize
func (mr *MockPublicKeyMockRecorder) KeySize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeySize", reflect.TypeOf((*MockPublicKey)(nil).KeySize))
}

// Verify mocks base method
func (m *MockPublicKey) Verify(arg0 crypto.Signature, arg1 []byte, arg2 crypto.Hasher) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify
func (mr *MockPublicKeyMockRecorder) Verify(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockPublicKey)(nil).Verify), arg0, arg1, arg2)
}
