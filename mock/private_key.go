// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dapperlabs/flow-go/crypto (interfaces: PrivateKey)

// Package mocks is a generated GoMock package.
package mocks

import (
	crypto "github.com/dapperlabs/flow-go/crypto"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPrivateKey is a mock of PrivateKey interface
type MockPrivateKey struct {
	ctrl     *gomock.Controller
	recorder *MockPrivateKeyMockRecorder
}

// MockPrivateKeyMockRecorder is the mock recorder for MockPrivateKey
type MockPrivateKeyMockRecorder struct {
	mock *MockPrivateKey
}

// NewMockPrivateKey creates a new mock instance
func NewMockPrivateKey(ctrl *gomock.Controller) *MockPrivateKey {
	mock := &MockPrivateKey{ctrl: ctrl}
	mock.recorder = &MockPrivateKeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPrivateKey) EXPECT() *MockPrivateKeyMockRecorder {
	return m.recorder
}

// Algorithm mocks base method
func (m *MockPrivateKey) Algorithm() crypto.SigningAlgorithm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Algorithm")
	ret0, _ := ret[0].(crypto.SigningAlgorithm)
	return ret0
}

// Algorithm indicates an expected call of Algorithm
func (mr *MockPrivateKeyMockRecorder) Algorithm() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Algorithm", reflect.TypeOf((*MockPrivateKey)(nil).Algorithm))
}

// Encode mocks base method
func (m *MockPrivateKey) Encode() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encode indicates an expected call of Encode
func (mr *MockPrivateKeyMockRecorder) Encode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockPrivateKey)(nil).Encode))
}

// KeySize mocks base method
func (m *MockPrivateKey) KeySize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeySize")
	ret0, _ := ret[0].(int)
	return ret0
}

// KeySize indicates an expected call of KeySize
func (mr *MockPrivateKeyMockRecorder) KeySize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeySize", reflect.TypeOf((*MockPrivateKey)(nil).KeySize))
}

// PublicKey mocks base method
func (m *MockPrivateKey) PublicKey() crypto.PublicKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicKey")
	ret0, _ := ret[0].(crypto.PublicKey)
	return ret0
}

// PublicKey indicates an expected call of PublicKey
func (mr *MockPrivateKeyMockRecorder) PublicKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicKey", reflect.TypeOf((*MockPrivateKey)(nil).PublicKey))
}

// Sign mocks base method
func (m *MockPrivateKey) Sign(arg0 []byte, arg1 crypto.Hasher) (crypto.Signature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", arg0, arg1)
	ret0, _ := ret[0].(crypto.Signature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign
func (mr *MockPrivateKeyMockRecorder) Sign(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockPrivateKey)(nil).Sign), arg0, arg1)
}
